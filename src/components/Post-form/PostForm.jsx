import React, { useCallback } from 'react'
import { useForm } from 'react-hook-form'
import { Button, Input, Select, RTE } from '../index.js'
import appwriteService from "../../appwrite/config"
import { useNavigate } from 'react-router-dom'
import { useSelector } from 'react-redux'



// this is the form that will contain 
// 1. input title                                     : data.title
// 2. slug                                            : data.slug
// 3. Editor (RTE)                                    : data.content
// 4. Image field                                     : data.image
// 5. selecting active or inactive field (Select)     : data.status
// 6. button to submit


// POst will Contains a argument Named post
// this form is used for both creatina new form as well as updating existing form

// register is used to control all the value of input fields in the form

function PostForm({ post }) {

  // watch : You can also pass an array of field names to watch to monitor multiple fields at once. If you don't pass any arguments to watch, it will monitor changes to all fields in the form. 
  // setValue : 
  const { register, handleSubmit, watch, setValue, control, getValues } = useForm({
    defaultValues: {
      title: post?.title || '',
      slug: post?.$id || '',
      content: post?.content || '',
      status: post?.status | 'active',
    }
  })

  const navigate = useNavigate();
  const userData = useSelector((state) => state.auth.userData);

  // this method will run only when button is clicked
  const submit = async (data) => {

    // if post value is not null then we are updating some existing post
    if (post) {

      // get data from post or inputted by the user
      const file = data.image[0] ? appwriteService.uploadFile(data.image[0]) : null

      // if file exists then delete the earlier image from post of user 
      if (file) {
        appwriteService.deleteFile(post.featuredimage)
      }

      // now create the new post with input given by user ( data )
      // ...data : spreading teh data fields but featuredImage will contain the url generated by above statement
      const dbPost = await appwriteService.updatePost(post.$id, {
        ...data,
        featuredimage: file ? file.$id : undefined,
      })

      // if dbPost has been created then navigate to next page
      if (dbPost) {
        navigate(`/post/${dbPost.$id}`)
      }

    } else {

      // if the post is null it means that new post is being created
      // at first we will create upload Image file and get its ID
      const file = await appwriteService.uploadFile(data.image[0]);

      if (file) {
        const fileId = file.$id;
        console.log("Here right now ðŸ˜Š")
        data.featuredimage = fileId;
        const dbPost = await appwriteService.createPost({ ...data, userId: userData.$id })
        if (dbPost) {
          navigate(`/post/${dbPost.$id}`)
        }
      }
    }
  }

  // this is used to generate slug
  const slugTransform = useCallback((value) => {
    if (value && typeof value === 'string') {
      return value
        .trim()
        .toLowerCase()
        .replace(/[^a-zA-Z\d\s]+/g, '-')
        .replace(/\s/g, '-')
    }

    return ""
  }, [])


  // called when watch,slugTransform, setValue changes
  React.useEffect(() => {
    const subscription = watch((value, { name }) => {
      if (name == 'title') {
        setValue('slug', slugTransform(value.title), { shouldValidate: true })
      }
    })
    return () => {
      subscription.unsubscribe()
    }
  }, [watch, slugTransform, setValue])

  return (
    <form onSubmit={handleSubmit(submit)} className="flex flex-wrap">
      <div className="w-2/3 px-2">
        <Input
          label="Title :"
          placeholder="Title"
          className="mb-4"
          {...register("title", { required: true })}
        />
        <Input
          label="Slug :"
          placeholder="Slug"
          className="mb-4"
          {...register("slug", { required: true })}
          onInput={(e) => {
            setValue("slug", slugTransform(e.currentTarget.value), { shouldValidate: true });
          }}
        />
        <RTE label="Content :  " name="content" control={control} defaultValue={getValues("content")} />
      </div>
      <div className="w-1/3 px-2">
        <Input
          label="Featured Image :"
          type="file"
          className="mb-4"
          accept="image/png, image/jpg, image/jpeg, image/gif"
          {...register("image", { required: !post })}
        />

        {post && (
          <div className="w-full mb-4">
            <img
              src={appwriteService.getFilePreview(post.featuredimage)}
              alt={post.title}
              className="rounded-lg"
            />
          </div>
        )}

        <Select
          options={["active", "inactive"]}
          label="Status : "
          className="mb-4"
          {...register("status", { required: true })}
        />

        <Button type="submit" bgColor={post ? "bg-green-500" : undefined} className="w-full">
          {post ? "Update" : "Submit"}
        </Button>
      </div>
    </form>
  )
}

export default PostForm
